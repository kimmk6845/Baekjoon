#include <iostream>
#include <vector>
using namespace std;

int N;
long long arr[101] = { 0,1,1, }; // 0은 더미
long long P(int N)
{
	if (N < 3)
		return arr[N];
	else if (arr[N] == 0)
		arr[N] = P(N - 2) + P(N - 3);
	return arr[N];
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int T;
	cin >> T;
	for (int i = 0; i < T; i++)
	{
		cin >> N;
		cout << P(N) << "\n";
	}
}

/*

오른쪽 그림과 같이 삼각형이 나선 모양으로 놓여져 있다. 첫 삼각형은 정삼각형으로 변의 길이는 1이다.
그 다음에는 다음과 같은 과정으로 정삼각형을 계속 추가한다. 나선에서 가장 긴 변의 길이를 k라 했을 때, 그 변에 길이가 k인 정삼각형을 추가한다.

파도반 수열 P(N)은 나선에 있는 정삼각형의 변의 길이이다. P(1)부터 P(10)까지 첫 10개 숫자는 1, 1, 1, 2, 2, 3, 4, 5, 7, 9이다.

N이 주어졌을 때, P(N)을 구하는 프로그램을 작성하시오.


===입력===
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. (1 ≤ N ≤ 100)

===출력===
각 테스트 케이스마다 P(N)을 출력한다.



예제 입력 1
2
6
12

예제 출력 1
3
16


*/

// 0 1 2 3 4 5 6 7 8 9 10 ...  <<< Index
// 1 1 1 2 2 3 4 5 7 9 12 ...  <<< value

// 1 --> 1 --> 1 --> 2(1+1)  [1번+3번idx] --> 2
// 3(1+2)  [1번+5번] --> 4(1+3)  [2번+6번] --> 5(1+4)  [3번+7번]
// 7(2+5)  [4번+8번] --> 9(2+7)  [5번+9번] --> 12(3+9)  [6번+10번]