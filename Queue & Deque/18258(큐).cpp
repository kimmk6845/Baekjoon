#include <iostream>
#include <string>
#include <queue>
using namespace std;
#define MAX 2000001


////////// STL 사용하지 않고 Queue 구현
int que[MAX];
int q_rear = 0;
int q_front = 0;

void push(int x);
int pop();
int size();
int empty();
int front();
int back();

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;

		if (s == "push")
		{
			int num;
			cin >> num;
			push(num);
		}
		if (s == "pop")
			cout << pop() << "\n";
		if (s == "size")
			cout << size() << "\n";
		if (s == "empty")
			cout << empty() << "\n";
		if (s == "front")
			cout << front() << "\n";
		if (s == "back")
			cout << back() << "\n";
	}
}

void push(int x)
{
	que[q_rear] = x;
	q_rear++;
}
int pop()
{
	if (q_front == q_rear || q_rear == 0)
		return -1;

	q_front++;
	return que[q_front - 1];
}
int size()
{
	return q_rear - q_front;
}
int empty()
{
	if (q_front == q_rear || q_rear == 0)
		return 1;
	else
		return 0;
}
int front()
{
	if (q_front == q_rear || q_rear == 0)
		return -1;
	return que[q_front];
}
int back()
{
	if (q_front == q_rear || q_rear == 0)
		return -1;
	return que[q_rear - 1];
}

/*
///////////// STL을 이용한 문제풀이
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;

	queue<int> Q;
	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;

		if (s == "push")
		{
			int num;
			cin >> num;
			Q.push(num);
		}
		if (s == "pop")
		{
			if (!Q.empty())
			{
				cout << Q.front() << "\n";
				Q.pop();
			}
			else
				cout << -1 << "\n";
		}
		if (s == "size")
			cout << Q.size() << "\n";
		if (s == "empty")
			cout << Q.empty() << "\n";
		if (s == "front")
		{
			if (!Q.empty())
			{
				cout << Q.front() << "\n";
			}
			else
				cout << -1 << "\n";
		}
		if (s == "back")
		{
			if (!Q.empty())
			{
				cout << Q.back() << "\n";
			}
			else
				cout << -1 << "\n";
		}
	}
}
*/

/*

문제
정수를 저장하는 큐를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 여섯 가지이다.

push X: 정수 X를 큐에 넣는 연산이다.
pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 큐에 들어있는 정수의 개수를 출력한다.
empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
입력
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 2,000,000)이 주어진다.
둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다.
주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.

출력
출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.


예제 입력 1
15
push 1
push 2
front
back
size
empty
pop
pop
pop
size
empty
pop
push 3
empty
front

예제 출력 1
1
2
2
0
1
2
-1
0
1
-1
0
3

*/