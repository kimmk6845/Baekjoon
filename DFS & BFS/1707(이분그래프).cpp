#include <iostream>
#include <vector>
#include <cstring>
using namespace std;
#define MAXSIZE 20000

int V, E;
vector<int> graph[MAXSIZE + 1];
int visit[MAXSIZE + 1];

void DFS(int start, int color);
bool isBipartiteGraph(void);

int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int K;
    cin >> K;

    for (int i = 0; i < K; i++)
    {
        cin >> V >> E;

        for (int j = 1; j <= V; j++)
            graph[j].clear();
        memset(visit, 0, sizeof(visit));


        for (int j = 0; j < E; j++)
        {
            int e1, e2;
            cin >> e1 >> e2;
            graph[e1].push_back(e2);
            graph[e2].push_back(e1);
        }

        for (int j = 1; j <= V; j++)
            if (visit[j] == 0)
                DFS(j, 1);


        if (isBipartiteGraph())
            cout << "YES" << endl;
        else
            cout << "NO" << endl;
    }
    return 0;
}

void DFS(int start, int color)
{
    visit[start] = color;
    for (int i = 0; i < graph[start].size(); i++)
    {
        int next = graph[start][i];
        if (!visit[next])
            DFS(next, 3 - color);
    }
}

bool isBipartiteGraph(void)
{
    for (int i = 1; i <= V; i++)
    {
        for (int j = 0; j < graph[i].size(); j++)
        {
            int next = graph[i][j];
            if (visit[i] == visit[next])
                return 0;
        }
    }
    return 1;
}

/*

문제
그래프의 정점의 집합을 둘로 분할하여, 각 집합에 속한 정점끼리는 서로 인접하지 않도록 분할할 수 있을 때, 그러한 그래프를 특별히 이분 그래프 (Bipartite Graph)라 부른다.

그래프가 입력으로 주어졌을 때, 이 그래프가 이분 그래프인지 아닌지 판별하는 프로그램을 작성하시오.

입력
입력은 여러 개의 테스트 케이스로 구성되어 있는데, 첫째 줄에 테스트 케이스의 개수 K가 주어진다.
각 테스트 케이스의 첫째 줄에는 그래프의 정점의 개수 V와 간선의 개수 E가 빈 칸을 사이에 두고 순서대로 주어진다.
각 정점에는 1부터 V까지 차례로 번호가 붙어 있다.
이어서 둘째 줄부터 E개의 줄에 걸쳐 간선에 대한 정보가 주어지는데, 각 줄에 인접한 두 정점의 번호 u, v (u ≠ v)가 빈 칸을 사이에 두고 주어진다.

출력
K개의 줄에 걸쳐 입력으로 주어진 그래프가 이분 그래프이면 YES, 아니면 NO를 순서대로 출력한다.

제한
2 ≤ K ≤ 5
1 ≤ V ≤ 20,000
1 ≤ E ≤ 200,000
예제 입력 1
2
3 2
1 3
2 3
4 4
1 2
2 3
3 4
4 2
예제 출력 1
YES
NO

*/